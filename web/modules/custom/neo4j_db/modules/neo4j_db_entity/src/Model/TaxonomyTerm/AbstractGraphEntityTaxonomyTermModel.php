<?php


namespace Drupal\neo4j_db_entity\Model\TaxonomyTerm;

use Drupal\neo4j_db_entity\Model\AbstractGraphEntityModelBase;
use GraphAware\Neo4j\OGM\Annotations as OGM;

/**
 * Class AbstractGraphEntityTaxonomyTermModel
 *
 * @package Drupal\neo4j_db_entity\Model\TaxonomyTerm
 *
 * @OGM\Node(label="TaxonomyTerm")
 */
class AbstractGraphEntityTaxonomyTermModel extends AbstractGraphEntityModelBase implements GraphEntityTaxonomyTermModelInterface {

  /**
   * @var string
   *
   * @OGM\Property(type="string")
   */
  protected $entityType = 'taxonomy_term';

  /**
   * @var string
   *
   * @OGM\Property(type="string")
   */
  protected $bundle;

  /**
   * @var int
   *
   * @OGM\GraphId()
   */
  protected $id;

  /**
   * @var int
   *
   * @OGM\Property(type="int")
   */
  protected $entityId;

  /**
   * @var string
   *
   * @OGM\Property(type="string")
   */
  protected $name;

  /**
   * @var \Drupal\taxonomy\TermInterface
   */
  protected $entity;

  /**
   * {@inheritDoc}
   */
  public function buildModel() {
    parent::buildModel(); // TODO: Change the autogenerated stub
    $this->setEntityId($this->entity()->id());
    $this->setName($this->entity()->getName());
    return $this;
  }

  public function getGraphEntity() {
    return $this->connection->findOneBy(__CLASS__, $this->findOneByCriteria());
  }

  /**
   * {@inheritDoc}
   */
  public function baseFindOneByCriteria() {
    return ['entityId' => intval($this->entity()->id())];
  }

  public function modelFindOneBy() {
    $graphNode = parent::modelFindOneBy();
    if ($graphNode) {
      $this->setId($graphNode->getId());
    }
    return $graphNode;
  }

  /**
   * {@inheritDoc}
   */
  public function entity() {
    /** @var \Drupal\taxonomy\TermInterface $entity */
    $entity = parent::entity();
    return $entity;
  }

  /**
   * @return int|null
   */
  public function getId() {
    return $this->id;
  }

  /**
   * @param int $id
   */
  public function setId(int $id): void {
    $this->id = $id;
  }

  /**
   * @param int $entityId
   */
  public function setEntityId(int $entityId): void {
    $this->entityId = $entityId;
  }

  /**
   * @return int
   */
  public function getEntityId(): int {
    return $this->entityId;
  }

  /**
   * @param string $name
   */
  public function setName(string $name): void {
    $this->name = $name;
  }

  /**
   * @return string
   */
  public function getName(): string {
    return $this->name;
  }

}
