<?php

namespace Drupal\nlc_network_individual\Model\Node;

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Entity\EntityInterface;
use Drupal\neo4j_db_entity\Model\AbstractGraphEntityModelBase;
use Drupal\neo4j_db_entity\Model\Node\GraphEntityNodeModelInterface;
use GraphAware\Neo4j\OGM\Annotations as OGM;

/**
 * Class GraphEntityUserUserModel
 *
 * @package Drupal\neo4j_db_entity\Model\Node
 *
 * @OGM\Node(label="ProgrammeYear")
 */
class GraphEntityNodeProgrammeYearModel extends AbstractGraphEntityModelBase implements GraphEntityNodeModelInterface {

  protected $entityType = 'node';

  protected $bundle = 'programme_year';

  protected $type = 'NodeProgrammeYear';

  /**
   * @var int
   *
   * @OGM\GraphId()
   */
  protected $id;

  /**
   * @var int
   *
   * @OGM\Property(type="int")
   */
  protected $entityId;

  /**
   * @var string
   *
   * @OGM\Property(type="string")
   */
  protected $title;

  /**
   * @var string
   *
   * @OGM\Property(type="string")
   */
  protected $startDate;

  /**
   * @var string
   *
   * @OGM\Property(type="string")
   */
  protected $endDate;

  /**
   * @var \Drupal\node\NodeInterface
   */
  protected $entity;

  /**
   * The Mapped Objects corresponding to the given entity.
   *
   * @var \Drupal\salesforce_mapping\Entity\MappedObject[]
   */
  protected $entitySalesforceMappedObjects = [];

  /**
   * @var string
   *
   * @OGM\Property(type="string")
   */
  protected $sf_id;

  /**
   * @var string
   *
   * @OGM\Property(type="string")
   */
  protected $sf_record_id;

  /**
   * {@inheritDoc}
   */
  public function buildModel() {
    parent::buildModel(); // TODO: Change the autogenerated stub
    $this->setEntityId($this->entity()->id());
    $this->setTitle($this->entity()->label());
    return $this;
  }


  /**
   * @param int $entityId
   */
  public function setEntityId(int $entityId): void {
    $this->entityId = $entityId;
  }

  /**
   * @return int
   */
  public function getEntityId(): int {
    return $this->entityId;
  }


  /**
   * @param string $title
   */
  public function setTitle(string $title): void {
    $this->title = $title;
  }

  /**
   * @return string
   */
  public function getTitle(): string {
    return $this->title;
  }

  /**
   * @return string
   */
  public function getStartDate(): string {
    return $this->startDate;
  }

  /**
   * @param string $startDate
   */
  public function setStartDate(string $startDate): void {
    $this->startDate = $startDate;
  }

  /**
   * @return string
   */
  public function getEndDate(): string {
    return $this->endDate;
  }

  /**
   * @param string $endDate
   */
  public function setEndDate(string $endDate): void {
    $this->endDate = $endDate;
  }

  /**
   * @return string
   */
  public function getSfId(): string {
    return $this->sf_id;
  }

  /**
   * @param string $sf_id
   */
  public function setSfId(string $sf_id): void {
    $this->sf_id = $sf_id;
  }

  /**
   * @return string
   */
  public function getSfRecordId(): string {
    return $this->sf_record_id;
  }

  /**
   * @param string $sf_record_id
   */
  public function setSfRecordId(string $sf_record_id): void {
    $this->sf_record_id = $sf_record_id;
  }

  /**
   * {@inheritDoc}
   *
   */
  public function setEntity(EntityInterface $entity): void {
    $this->entity = $entity;
    $this->setEntityId($entity->id());
    try {
      $this->entitySalesforceMappedObjects = $this->getSalesforceMappedObjects($this->entity);
      if (!empty($this->getEntitySalesforceMappedObjectsIds())) {
        $this->setSfId(current($this->getEntitySalesforceMappedObjectsIds()));
      }
      $this->setFindOneByCriteria($this->baseFindOneByCriteria());
    }
    catch (InvalidPluginDefinitionException | PluginNotFoundException $e) {
      // Do something?
    }
  }

  /**
   * {@inheritDoc}
   */
  public function baseFindOneByCriteria() {
    $ids = $this->getEntitySalesforceMappedObjectsIds();
    return empty($ids) ? ['entityId' => $this->getEntityId()] : ['sf_id' => current($ids)];
  }

  /**
   * @return array
   *
   */
  public function getEntitySalesforceMappedObjectsIds(): array {
    $ids = [];
    if (!empty($this->getEntitySalesforceMappedObjects())) {
      foreach ($this->entitySalesforceMappedObjects as $key => $salesforceMappedObject) {
        $ids[$key] = $salesforceMappedObject->sfid();
      }
    }
    return $ids;
  }


  /**
   * Helper function to fetch existing MappedObject or create a new one.
   *
   * @param \Drupal\Core\Entity\EntityInterface $entity
   *   The entity to be mapped.
   *
   * @return \Drupal\salesforce_mapping\Entity\MappedObject[]
   *   The Mapped Objects corresponding to the given entity.
   *
   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
   */
  protected function getSalesforceMappedObjects(EntityInterface $entity) {
    return $this
      ->entityTypeManager()
      ->getStorage('salesforce_mapped_object')
      ->loadByEntity($entity);
  }

  /**
   * @return \Drupal\salesforce_mapping\Entity\MappedObject[]
   */
  public function getEntitySalesforceMappedObjects(): array {
    return $this->entitySalesforceMappedObjects;
  }

}
