<?php
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Preprocess page
 */
function bevan_preprocess_page(&$vars) {
  // Save GET parameters to session so we can get them in subsequent AJAX requests.
  // This works because AJAX requests don't trigger this hook.
  // Using $_SESSION here because the D8 Request->getSession() returns NULL in an AJAX call.
  $req = \Drupal::request();
  if (\Drupal::routeMatch()->getRouteName() === 'view.senior_leaders_directory_es.page') {
    if ($req->query->get('search')) {
      $_SESSION['directory_search'] = $req->query->get('search');
    }
    else {
      unset($_SESSION['directory_search']);
    }
  }
}

/**
 * Preprocess page
 */
function bevan_preprocess_block(&$vars) {
  // Mark the block as an ajax request.
  $vars['is_ajax'] = !empty($_GET['_wrapper_format']) && $_GET['_wrapper_format'] = 'drupal_ajax';
}

/**
 * Preprocess the facets summary item list.
 */
function bevan_preprocess_facets_summary_item_list(array &$vars) {

  // Add any search string to the list of applied facets.
  $vars['applied'] = [];
  $vars['facets_count'] = 0;
  $search = $_SESSION['directory_search'] ?? FALSE;
  if (!empty($search)) {
    $vars['applied']['keywords'] = [
      'title' => 'Keywords',
      'row_class' => 'facet-summary__applied-row__spaced',
      'items' => [],
    ];
    foreach(explode(' ', $search) ?? [] as $k) {
      $vars['facets_count']++;
      $vars['applied']['keywords']['items'][] = [
        'value' => [
          '#plain_text' => $k,
          '#prefix' => '<span>',
          '#suffix' => '</span>',
        ]
      ];
    }
  }

  // Expose the facet for each item.
  $vars['result_count'] = 0;
  foreach($vars['items'] as &$item) {

    // Get the result count separately from facets.
    if (!empty($item['value']['#count'])) {
      $vars['result_count'] = $item['value']['#count'];
    }

    // For each applied item, group it by facet.
    if (!empty($item['value']['#title']['#facet'])) {
      $vars['facets_count']++;
      $facet = $item['value']['#title']['#facet'];
      if (empty($vars['applied'][$facet->id()])) {
        $vars['applied'][$facet->id()] = [
          'title' => $facet->getName(),
          'items' => [],
        ];
      }
      $vars['applied'][$facet->id()]['items'][] = $item;
    }
  }
}

/**
 * Alter views search forms.
 */
function bevan_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-senior-leaders-directory-es-page') {
    // TODO: Work out proper caching settings.
    $form_state->disableCache();
    $url = Url::fromRoute('view.senior_leaders_directory_es.page');
    $reset_link = Link::fromTextAndUrl(t('Start new search'), $url);
    $reset_link = $reset_link->toRenderable();
    $reset_link['#attributes'] = array(
      'class' => array('govuk-link'),
      'id' => 'search-reset-link',
      'aria-hidden' => 'false',
    );

    // Use the reset button to determine if we should show the reset link.
    if (isset($form['actions']['reset']['#access']) && !$form['actions']['reset']['#access']) {
      $reset_link['#attributes']['class'][] = 'visually-hidden';
      $reset_link['#attributes']['aria-hidden'] = 'true';
    }
    // Then get rid of the button since we don't really need it.
    unset($form['actions']['reset']);

    $form['reset_link'] = [
      '#prefix' => '<div class="govuk-form-group">',
      '#suffix' => '</div>',
      '#markup' => render($reset_link),
      '#weight' => -1,
    ];
  }
}

/**
 * Implements hook_preprocess_status_messages().
 */
function bevan_preprocess_status_messages(&$variables) {
  // Hide the unneeded trailing '1 error has been found: Email' error message from a problematic login.
  if (!empty($variables['message_list']['error']) && count($variables['message_list']['error']) > 0) {
    /** @var \Drupal\Core\Render\Markup $lastMessage */
    if ($lastMessage = end($variables['message_list']['error'])) {
      // Don't try and change a string into a string.
      if (is_string($lastMessage)) {
        $haystack = $lastMessage;
      }
      else {
        // Convert Markup object into string.
        $haystack = $lastMessage->__toString();
      }

      if ((strpos($haystack, '1 error has been found') > -1) && (strpos($haystack, 'Email') > 0)) {
        array_pop($variables['message_list']['error']);
      }
    }
  }
}
