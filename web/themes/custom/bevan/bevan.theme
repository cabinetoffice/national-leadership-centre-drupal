<?php
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;

/**
 * Preprocess page
 */
function bevan_preprocess_page(&$vars) {
  // Save GET parameters to session so we can get them in subsequent AJAX requests.
  // This works because AJAX requests don't trigger this hook.
  // Using $_SESSION here because the D8 Request->getSession() returns NULL in an AJAX call.
  $req = \Drupal::request();
  $routeName = \Drupal::routeMatch()->getRouteName();
  if ($routeName === 'view.senior_leaders_directory_es.page') {
    if ($req->query->get('search')) {
      $_SESSION['directory_search'] = $req->query->get('search');
    }
    else {
      unset($_SESSION['directory_search']);
    }
  }
  elseif ($routeName === 'view.library.page') {
    if ($req->query->get('search')) {
      $_SESSION['library_search'] = $req->query->get('search');
    }
    else {
      unset($_SESSION['library_search']);
    }
  }
}

/**
 * Preprocess page
 */
function bevan_preprocess_block(&$vars) {
  // Mark the block as an ajax request.
  $vars['is_ajax'] = !empty($_GET['_wrapper_format']) && $_GET['_wrapper_format'] = 'drupal_ajax';
}

/**
 * Preprocess the facets summary item list.
 */
function bevan_preprocess_facets_summary_item_list(array &$vars) {
  // Add any search string to the list of applied facets.
  $vars['applied'] = [];
  $vars['facets_count'] = 0;
  $routeName = \Drupal::routeMatch()->getRouteName();
  switch ($routeName) {
    case 'view.senior_leaders_directory_es.page':
      $search = $_SESSION['directory_search'] ?? FALSE;
      break;

    case 'view.library.page':
      $search = $_SESSION['library_search'] ?? FALSE;
      break;

    default:
      $search = FALSE;
  }
  if (!empty($search)) {
    $vars['applied']['keywords'] = [
      'title' => 'Keywords',
      'row_class' => 'facet-summary__applied-row__spaced',
      'items' => [],
    ];
    foreach(explode(' ', $search) ?? [] as $k) {
      $vars['facets_count']++;
      $vars['applied']['keywords']['items'][] = [
        'value' => [
          '#plain_text' => $k,
          '#prefix' => '<span>',
          '#suffix' => '</span>',
        ],
      ];
    }
  }

  // Expose the facet for each item.
  $vars['result_count'] = 0;
  foreach($vars['items'] as &$item) {

    // Get the result count separately from facets.
    if (!empty($item['value']['#count'])) {
      $vars['result_count'] = $item['value']['#count'];
    }

    // For each applied item, group it by facet.
    if (!empty($item['value']['#title']['#facet'])) {
      $vars['facets_count']++;
      $facet = $item['value']['#title']['#facet'];
      if (empty($vars['applied'][$facet->id()])) {
        $vars['applied'][$facet->id()] = [
          'title' => $facet->getName(),
          'items' => [],
        ];
      }
      $vars['applied'][$facet->id()]['items'][] = $item;
    }
  }
  $vars['list_class'] = $vars['facets_count'] > 0 ? 'facet-summary__applied' : 'facet-summary__applied visually-hidden';
}

/**
 * Alter views search forms.
 */
function bevan_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Start a new search link
  $searchableForms = [
    'views-exposed-form-senior-leaders-directory-es-page' => 'view.senior_leaders_directory_es.page',
    'views-exposed-form-library-page' => 'view.library.page',
  ];
  if (array_key_exists($form['#id'], $searchableForms)) {
    // TODO: Work out proper caching settings.
    $form_state->disableCache();
    $url = Url::fromRoute($searchableForms[$form['#id']]);
    $reset_link = Link::fromTextAndUrl(t('Start new search'), $url);
    $reset_link = $reset_link->toRenderable();
    $reset_link['#attributes'] = array(
      'class' => array('govuk-link', 'back-to-search-link'),
      'id' => 'search-reset-link'
    );

    // Use the reset button to determine if we should show the reset link.
    if (isset($form['actions']['reset']['#access']) && !$form['actions']['reset']['#access']) {
      $reset_link['#attributes']['class'][] = 'hidden';
    }
    // Then get rid of the button since we don't really need it.
    unset($form['actions']['reset']);

    $form['reset_link'] = [
      '#markup' => render($reset_link),
      '#weight' => -1,
    ];
  }
}

/**
 * Implements hook_preprocess_status_messages().
 */
function bevan_preprocess_status_messages(&$variables) {
  // Hide the unneeded trailing '1 error has been found: Email' error message from a problematic login.
  if (!empty($variables['message_list']['error']) && count($variables['message_list']['error']) > 0) {
    /** @var \Drupal\Core\Render\Markup|string $lastMessage */
    if ($lastMessage = end($variables['message_list']['error'])) {
      $haystack = is_string($lastMessage) ? $lastMessage : $lastMessage->__toString();
      if ((strpos($haystack, '1 error has been found') > -1) && (strpos($haystack, 'Email') > 0)) {
        array_pop($variables['message_list']['error']);
      }
    }
  }
}

/**
 * Implements hook_preprocess_block() for facets blocks.
 */
function bevan_preprocess_block__facets(&$variables) {
  $variables['attributes']['class'][] = 'facet-container';
  $library_block_ids = [
    'facet_block:filter_by_topic',
    'facet_block:filter_by_type',
  ];
  if (in_array($variables['plugin_id'], $library_block_ids )) {
    $variables['attributes']['class'][] = 'facet-container__library';
  }
}

//function bevan_preprocess_page__library(&$variables) {
//  $current_user = \Drupal::currentUser();
//  $variables['content_class'] = $current_user->isAuthenticated() ? 'govuk-grid-column-full' : 'govuk-width-container govuk-width-container--narrow';
//}

function bevan_preprocess_views_view__library(&$variables) {
  $variables['attributes']['class'][] = 'connect-library';
}

function bevan_preprocess_views_view_fields(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $fields = $variables['fields'];
  if ($view->id() == 'library') {
    $term_fields = [
      'field_topic_name' => 'topic',
      // 'field_label_name' => 'label',
    ];
    foreach ($fields as $id => $field) {
      // Add classes to topic or label fields in the library view
      if (in_array($id, array_keys($term_fields))) {
        $topic_name = sprintf('nlc-content-block__%s--%s', $term_fields[$id], trim(strip_tags($field->content->__toString())));
        $attributes = [
          'class' => [
            sprintf('nlc-content-block__%s',$term_fields[$id]),
            Html::getClass($topic_name),
          ],
        ];
        $field->wrapper_attributes = new \Drupal\Core\Template\Attribute($attributes);
        $variable['fields'][$id] = $field;
      }
    }
  }
}
